/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { DopplerApi } from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    auth?: {
      credentials?: core.Supplier<core.BasicAuth>;
    };
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async list(request: DopplerApi.activityLog.list.Request): Promise<DopplerApi.activityLog.list.Response> {
    const queryParameters = new URLSearchParams();
    if (request.page != null) {
      queryParameters.append("page", request.page);
    }

    if (request.perPage != null) {
      queryParameters.append("per_page", request.perPage.toString());
    }

    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/logs/"),
      method: "GET",
      headers: {
        Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.credentials)),
      },
      queryParameters: queryParameters,
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.activityLog.ActivityLogsList.parse(
          response.body as serializers.activityLog.ActivityLogsList.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async retrieve(
    request: DopplerApi.activityLog.retrieve.Request
  ): Promise<DopplerApi.activityLog.retrieve.Response> {
    const queryParameters = new URLSearchParams();
    queryParameters.append("log", request.log);
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/logs/log"),
      method: "GET",
      headers: {
        Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.credentials)),
      },
      queryParameters: queryParameters,
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.activityLog.ActivityLog.parse(response.body as serializers.activityLog.ActivityLog.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
